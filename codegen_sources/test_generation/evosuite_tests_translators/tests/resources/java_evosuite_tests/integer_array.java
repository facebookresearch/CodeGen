/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:54:05 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K_ESTest extends PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);

      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);

      integerArray0[1] = integer1;
      int[] intArray0 = new int[3];
      intArray0[2] = int0;
      boolean boolean0 = PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K.isPossible(integerArray0, intArray0, 1, 0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1), 0, 0}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);

      integerArray0[0] = integer0;
      int int1 = 1;
      integerArray0[1] = integer0;
      int[] intArray0 = new int[3];
      intArray0[2] = int0;
      boolean boolean0 = PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K.isPossible(integerArray0, intArray0, int1, (-50146));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1), 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(2, integerArray0.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);

      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int[] intArray0 = new int[3];
      boolean boolean0 = PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K.isPossible(integerArray0, intArray0, (-54229), 1);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);

      integerArray0[0] = integer0;
      int int0 = 1;
      integerArray0[1] = integerArray0[0];
      int[] intArray0 = new int[3];
      boolean boolean0 = PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K.isPossible(integerArray0, intArray0, 1, int0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K pERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K0 = new PERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K();
      assertNotNull(pERMUTE_TWO_ARRAYS_SUM_EVERY_PAIR_GREATER_EQUAL_K0);
  }
}